name: PR Preview

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  id-token: write       # OIDC 필수
  contents: read
  pull-requests: write  # URL 코멘트 작성

env:
  PROJECT_ID: quali-journal-prod
  REGION: asia-northeast3
  SERVICE_NAME: pr-${{ github.event.pull_request.number }}

jobs:
  preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (WIF-PR)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WIF_PROVIDER_PR }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          token_format: "access_token"

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      # ⚠️ 메인 배포가 이미 Cloud Build로 잘 되고 있다면,
      # 동일 방식으로 소스에서 바로 배포하는 게 가장 간단/안전함.
      - name: Deploy to Cloud Run (Preview)
        run: |
          gcloud run deploy "$SERVICE_NAME" \
            --project "$PROJECT_ID" \
            --region "$REGION" \
            --source . \
            --allow-unauthenticated \
            --port 8080 \
            --quiet

      - name: Get Preview URL
        id: url
        run: |
          URL=$(gcloud run services describe "$SERVICE_NAME" \
            --project "$PROJECT_ID" \
            --region "$REGION" \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Comment Preview URL on PR
        uses: actions/github-script@v7
        with:
          script: |
            const url = core.getInput('url', { required: true });
            const body = `🚀 **Preview deployed**: ${url}`;
            const {context, github} = require('@actions/github');
            // 기존 코멘트가 있으면 업데이트, 없으면 새로 작성
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const marker = "🚀 **Preview deployed**:";
            const found = comments.find(c => c.body && c.body.includes(marker));
            if (found) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: found.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
        env:
          url: ${{ steps.url.outputs.url }}
