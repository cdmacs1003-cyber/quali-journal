# .github/workflows/emergency-deploy.yml
# 최종본: WIF(키 없음) 전용 / Cloud Run 소스 배포 / ADMIN_TOKEN은 Secret Manager로 주입

name: Deploy to Cloud Run

on:
  workflow_dispatch:          # 수동 실행
  push:
    branches: [ "main" ]      # main 푸시 시 자동
  pull_request:               # PR 체크용

permissions:
  contents: read
  id-token: write             # WIF(OIDC) 사용에 필수

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 0) 소스 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 1) WIF 인증 (JSON 키 사용 금지)
      - name: Auth to Google Cloud (WIF)
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_DEPLOY_SA_EMAIL }}

      # 2) gcloud 설치
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # 3) 필요한 API 보장
      - name: Enable required APIs
        shell: bash
        run: |
          gcloud services enable \
            run.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            secretmanager.googleapis.com

      # 4) Cloud Run 배포(소스에서 빌드 → 배포)
      #    - 실행 SA 지정: GOOGLE_SERVICE_ACCOUNT (선택)
      #    - ADMIN_TOKEN: Secret Manager에서 최신 버전 연결
      #    - API_KEY: 있으면 평문 ENV로 주입
      - name: Deploy to Cloud Run
        shell: bash
        env:
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
          RUN_SA: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}     # 예) quali-run-sa@... (없으면 비워둠)
          ADMIN_TOKEN_SECRET_NAME: ADMIN_TOKEN              # Secret Manager의 시크릿 이름
          API_KEY: ${{ secrets.API_KEY }}                   # 선택
        run: |
          set -euo pipefail

          SA_OPT=""
          if [[ -n "${RUN_SA:-}" ]]; then
            SA_OPT="--service-account ${RUN_SA}"
          fi

          # 평문 ENV(선택)
          ENV_OPTS=""
          if [[ -n "${API_KEY:-}" ]]; then
            ENV_OPTS="--update-env-vars API_KEY=${API_KEY}"
          fi

          # Secret Manager → 컨테이너 ENV 매핑
          SECRET_OPTS="--set-secrets ${ADMIN_TOKEN_SECRET_NAME}=${ADMIN_TOKEN_SECRET_NAME}:latest"

          # 소스에서 빌드하여 배포(Cloud Build 사용)
          gcloud run deploy "${SERVICE}" \
            --region "${REGION}" \
            --source . \
            ${SA_OPT} \
            ${ENV_OPTS} \
            ${SECRET_OPTS} \
            --allow-unauthenticated \
            --quiet

      # 5) 서비스 URL 출력
      - name: Show URL
        id: show-url
        shell: bash
        env:
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          SERVICE: ${{ secrets.CLOUD_RUN_SERVICE }}
        run: |
          URL=$(gcloud run services describe "${SERVICE}" --region "${REGION}" --format='value(status.url)')
          echo "Service URL: ${URL}"
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      # 6) 스모크 테스트(200계열 기대)
      - name: Smoke test (health & report)
        if: always()
        shell: bash
        env:
          URL: ${{ steps.show-url.outputs.url }}
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          set -e
          echo "Ping: ${URL}/api/status"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${ADMIN_TOKEN}" "${URL}/api/status" || true)
          echo "HTTP ${CODE}"
          if [[ "${CODE}" =~ ^2 ]]; then
            echo "Smoke OK"
          else
            echo "::warning::Smoke test returned HTTP ${CODE}"
          fi
