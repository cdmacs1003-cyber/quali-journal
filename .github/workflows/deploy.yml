name: Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/656589300029/locations/global/workloadIdentityPools/github-pool/providers/ghwif-main"
          service_account: "github-deploy@quali-journal-prod.iam.gserviceaccount.com"
          project_id: "quali-journal-prod"
          token_format: "access_token"




      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Write env.yaml
        run: |
          cat > env.yaml <<'EOF'
          ALLOWED_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000"
          EOF

      # PR은 배포 안 함. main/수동실행만 배포
      - name: Deploy to Cloud Run
        if: github.event_name != 'pull_request'
        run: |
          set -eux
          gcloud config set project "quali-journal-prod"

          gcloud run deploy "quali-journal-admin" \
            --region "asia-northeast3" \
            --source "." \
            --service-account "quali-run-sa@quali-journal-prod.iam.gserviceaccount.com" \
            --env-vars-file "env.yaml" \
            --set-secrets "ADMIN_TOKEN=ADMIN_TOKEN:latest" \
            --allow-unauthenticated \
            --quiet
      - name: Smoke test (health & report)
        run: |
          set -euo pipefail
          PROJ="quali-journal-prod"
          REGION="asia-northeast3"
          SVC="quali-journal-admin"

          # 서비스 URL
          URL=$(gcloud run services describe "$SVC" --region "$REGION" --format="value(status.url)")
          echo "ℹ️ URL=$URL"

          # 1) /health : 200 이어야 통과
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health")
          if [ "$code" != "200" ]; then
            echo "❌ /health failed (code=$code)"; exit 1
          fi
          echo "✅ /health OK"

          # 2) /api/report : 토큰을 Secret에서 읽어 POST {}
          TOKEN=$(gcloud secrets versions access latest --secret=ADMIN_TOKEN --project "$PROJ")
          echo "::add-mask::${TOKEN}"  # 토큰 마스킹
          code=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
                 -H "X-Admin-Token: ${TOKEN}" -H "Content-Type: application/json" \
                 --data "{}" "$URL/api/report")
          if [ "$code" != "200" ]; then
            echo "❌ /api/report failed (code=$code)"; exit 1
          fi
          echo "✅ /api/report OK"

      - name: Notify Slack
        if: always()
        run: |
          set -e
          WEBHOOK="${{ secrets.SLACK_WEBHOOK_URL }}"
          if [ -z "$WEBHOOK" ]; then
            echo "No SLACK_WEBHOOK_URL; skipping Slack notify."
            exit 0
          fi
          STATUS="${{ job.status }}"
          REPO="${{ github.repository }}"
          REF="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MSG="🚀 Deploy ${STATUS} | ${REPO}@${REF} (${SHA})"
          payload=$(printf '{"text":"%s\nLogs: %s"}' "$MSG" "$RUN_URL")
          curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$WEBHOOK" || echo "Slack post failed (non-blocking)"
